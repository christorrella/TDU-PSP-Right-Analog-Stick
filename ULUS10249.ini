_S ULUS-10249
_G Test Drive Unlimited

_C0 Enable Right Analog Stick for Camera

// created by Christopher Torrella

_L 0x20AE3ADC 0x0934F264    // (table 1, "assigned controls") pointer to entry in table 2 for "HEAD_LEFT"
_L 0x20AE3AE4 0x0934F2A0    // (table 1, "assigned controls") pointer to entry in table 2 for "HEAD_RIGHT"
_L 0x20AE3AEC 0x0934F1EC    // (table 1, "assigned controls") pointer to entry in table 2 for "HEAD_UP"
_L 0x20AE3AF0 0x0934F228    // (table 1, "assigned controls") pointer to entry in table 2 for "HEAD_DOWN"

_L 0x20B4F1EC 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F200 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F208 0x44414548    // (table 2, "added action names") control text "HEAD"
_L 0x20B4F20C 0x0050555F    // (table 2, "added action names") control text "_UP "

_L 0x20B4F228 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F23C 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F244 0x44414548    // (table 2, "added action names") control text "HEAD"
_L 0x20B4F248 0x574F445F    // (table 2, "added action names") control text "_DOW"
_L 0x20B4F24C 0x0000004E    // (table 2, "added action names") control text "N   "

_L 0x20B4F264 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F278 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F280 0x44414548    // (table 2, "added action names") control text "HEAD"
_L 0x20B4F284 0x46454C5F    // (table 2, "added action names") control text "_LEF"
_L 0x20B4F288 0x00000054    // (table 2, "added action names") control text "T   "

_L 0x20B4F2A0 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F2B4 0x00000001    // (table 2, "added action names") says "data exists"?
_L 0x20B4F2BC 0x44414548    // (table 2, "added action names") control text "HEAD"
_L 0x20B4F2C0 0x4749525F    // (table 2, "added action names") control text "_RIG"
_L 0x20B4F2C4 0x00005448    // (table 2, "added action names") control text "HT  "

// control order in memory at 0x0880200X (X=0/4/8/C) is down, up, right, left (-0x30)
_L 0x20B50DB0 0x08801FD4    // (table 4, "where to find control names and values in table 3") pointer to item in button values table up
_L 0x20B50DD0 0x08801FD0    // (table 4, "where to find control names and values in table 3") pointer to item in button values table down
_L 0x20B50DF0 0x08801FDC    // (table 4, "where to find control names and values in table 3") pointer to item in button values table left 
_L 0x20B50E10 0x08801FD8    // (table 4, "where to find control names and values in table 3") pointer to item in button values table right

// Jump into custom function; Loads input from SCE control buffer into t1 and t2
_L 0x20021DB4 0x0A200804    // j        0x08802010

_L 0x20002010 0x007D1821    // addu     v1,v1,sp    this step was overwritten by j above, this ensures it is still performed

_L 0x20002014 0x4480E800    // mtc1     zero,f29    move zero to f29
_L 0x20002018 0x90AA000A    // lbu      t2,0xA(a1)  load buffer value of right analog stock into t2
_L 0x2000201C 0x448A0000    // mtc1     t2,f0       move buffer value into f0
_L 0x20002020 0x46800020    // cvt.s.w  f0,f0       convert f0 into another format
_L 0x20002024 0x46020001    // sub.s    f0,f0,f2    subtract 128 (f2) from f0 (buffer value) and store in f0
_L 0x20002028 0x90A9000B    // lbu      t1,0xB(a1)  load buffer value of right analog stock into t2
_L 0x2000202C 0x46010003    // div.s    f0,f0,f1    divide f0 and f1 and put in f0
_L 0x20002030 0x4600EFC0    // add.s    f31,f29,f0  add zero (f29) to f0 and store in f31
_L 0x20002034 0x44890000    // mtc1     t1, f0      move buffer value from t1 into f0
_L 0x20002038 0x46800020    // cvt.s.w  f0,f0       convert f0 into another format
_L 0x2000203C 0x46020001    // sub.s    f0, f0, f2  subtract 128 (f2) from f0 (buffer value) and store in f0
_L 0x20002040 0x46010003    // div.s    f0,f0,f1    divide f0 and f1 and put in f0
_L 0x20002044 0x4600EF80    // add.s    f30,f29,f0  add zero (f29) to f0 and store in f30

// Performing math on t1 and t2 within FPRs and storing Down,Up,Right,Left at 0880200X (X=0/4/8/C)

// reference for where to store the stick values
_L 0x20002048 0x3C0C0880    // lui      t4,0880
_L 0x2000204C 0x258C2000    // addi     t4,t4,0x2000

// down
_L 0x20002050 0x44800800    // mtc1     zero,f1
_L 0x20002054 0x4601F03F    // c.ngt    f30,f1
_L 0x20002058 0x00000000    // nop 
_L 0x2000205C 0x45010002    // bc1t     2 after delay slot
_L 0x20002060 0x00000000    // nop 
_L 0x20002064 0x4600F046    // mov.s    f1,f30      move 30 into f1
_L 0x20002068 0x3C0B3F80    // lui      t3,0x3F80
_L 0x2000206C 0x448B0000    // mtc1     t3,f0
_L 0x20002070 0x4600083F    // c.ngt    f1,f0
_L 0x20002074 0x00000000    // nop 
_L 0x20002078 0x45010002    // bc1t     2 after delay slot
_L 0x2000207C 0xE5810000    // swc1     f1,0x00(t4)
_L 0x20002080 0xE5800000    // swc1     f0,0x00(t4)

// up
_L 0x20002084 0x44800800    // mtc1     zero,f1
_L 0x20002088 0x4601F03C    // c.lt     f30,f1
_L 0x2000208C 0x00000000    // nop 
_L 0x20002090 0x45000002    // bc1f     2 after delay slot
_L 0x20002094 0x00000000    // nop 
_L 0x20002098 0x4600F047    // neg.s    f1,f30
_L 0x2000209C 0x3C0B3F80    // lui      t3,0x3F80
_L 0x200020A0 0x448B0000    // mtc1     t3,f0
_L 0x200020A4 0x4600083F    // c.ngt    f1,f0
_L 0x200020A8 0x00000000    // nop 
_L 0x200020AC 0x45010002    // bc1t     2 after delay slot
_L 0x200020B0 0xE5810004    // swc1     f1,0x04(t4)
_L 0x200020B4 0xE5800004    // swc1     f0,0x04(t4)

// right
_L 0x200020B8 0x44800800    // mtc1     zero,f1
_L 0x200020BC 0x4601F83C    // c.lt     f31,f1
_L 0x200020C0 0x00000000    // nop 
_L 0x200020C4 0x45010002    // bc1t     2 after delay slot
_L 0x200020C8 0x00000000    // nop 
_L 0x200020CC 0x4600F846    // mov.s    f1,f31      move 31 into f1
_L 0x200020D0 0x3C0B3F80    // lui      t3,0x3F80
_L 0x200020D4 0x448B0000    // mtc1     t3,f0
_L 0x200020D8 0x4600083F    // c.ngt    f1,f0
_L 0x200020DC 0x00000000    // nop 
_L 0x200020E0 0x45010002    // bc1t     2 after delay slot
_L 0x200020E4 0xE5810008    // swc1     f1,0x08(t4) 80000808
_L 0x200020E8 0xE5800008    // swc1     f0,0x08(t4) 44800800

// left
_L 0x200020EC 0x44800800    // mtc1     zero,f1
_L 0x200020F0 0x4601F83C    // c.lt     f31,f1
_L 0x200020F4 0x00000000    // nop 
_L 0x200020F8 0x45000002    // bc1f     2 after delay slot
_L 0x200020FC 0x00000000    // nop 
_L 0x20002100 0x4600F847    // neg.s    f1,f31
_L 0x20002104 0x3C0B3F80    // lui      t3,0x3F80
_L 0x20002108 0x448B0000    // mtc1     t3,f0
_L 0x2000210C 0x4600083F    // c.ngt    f1,f0
_L 0x20002110 0x00000000    // nop 
_L 0x20002114 0x45010002    // bc1t     2 after delay slot
_L 0x20002118 0xE581000C    // swc1     f1,0x0C(t4)
_L 0x2000211C 0xE580000C    // swc1     f0,0x0C(t4)


// this loads 127 back into f1; fixes issues from changing f1
_L 0x20002120 0x3C0C42FE    // lui      t4,0x42FE
_L 0x20002124 0x448C0800    // mtc1     t4,f1

// go back to original function that is loading left analog stick into memory
_L 0x20002128 0x0A20876E    // j        0x8821DB8
